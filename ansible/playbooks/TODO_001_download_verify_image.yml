---
- name: Download and Verify Armbian Image on macOS
  hosts: localhost
  gather_facts: no
  vars:
    base_url: "https://fastmirror.pp.ua/armbian-dl/orangepi5-plus/archive/"
    image_name: "Armbian_23.11.1_Orangepi5-plus_bookworm_edge_6.7.0-rc1_minimal.img.xz"
    sha_file_name: "Armbian_23.11.1_Orangepi5-plus_bookworm_edge_6.7.0-rc1_minimal.img.xz.sha"

  tasks:
    - name: Check if image file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/{{ image_name }}"
      register: image_file

    - name: Check if SHA file exists
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/{{ sha_file_name }}"
      register: sha_file

    - name: Calculate SHA checksum of the image if exists
      ansible.builtin.command:
        cmd: "shasum -a 256 {{ image_name }}"
        chdir: "{{ playbook_dir }}"
      register: calculated_checksum
      changed_when: false
      when: image_file.stat.exists and sha_file.stat.exists

    - name: Read SHA checksum from SHA file if exists
      ansible.builtin.command:
        cmd: "grep -oE '[0-9a-f]{64}' {{ sha_file_name }}"
        chdir: "{{ playbook_dir }}"
      register: sha_file_checksum
      changed_when: false
      when: image_file.stat.exists and sha_file.stat.exists

    - name: Compare SHA checksums and exit if match
      ansible.builtin.debug:
        msg: "SHA checksum verification passed, exiting TODO: verify GPG signature"
      when: image_file.stat.exists and sha_file.stat.exists and calculated_checksum.stdout.split()[0] == sha_file_checksum.stdout
      register: checksum_match
      changed_when: false

    - name: Download Armbian Image if not exists or checksum fails
      ansible.builtin.get_url:
        url: "{{ base_url }}{{ image_name }}"
        dest: "{{ playbook_dir }}/{{ image_name }}"
        timeout: 600
      when: not image_file.stat.exists or not checksum_match is defined

    - name: Download SHA File if not exists or checksum fails
      ansible.builtin.get_url:
        url: "{{ base_url }}{{ sha_file_name }}"
        dest: "{{ playbook_dir }}/{{ sha_file_name }}"
        timeout: 60
      when: not sha_file.stat.exists or not checksum_match is defined

    - name: Verify SHA Checksum after download
      ansible.builtin.command:
        cmd: "shasum -a 256 -c {{ sha_file_name }}"
        chdir: "{{ playbook_dir }}"
      register: sha_check_result
      failed_when: sha_check_result.rc != 0
      when: not checksum_match is defined

    - name: Display SHA Check Result
      ansible.builtin.debug:
        var: sha_check_result.stdout_lines
      when: not checksum_match is defined
  
